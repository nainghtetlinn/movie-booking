// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.ObjectId
  access_token      String? @db.ObjectId
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.ObjectId
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  password  String?
  phone_no  String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum SeatStatus {
  PURCHASED
  AVAILABLE
}

model Seat {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  class    String?
  price    Int?
  row      String?
  number   Int?
  status   SeatStatus?
  screenId String      @db.ObjectId
}

model Show {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  start_time DateTime?
  end_time   DateTime?
  date       DateTime?
  screenId   String?   @db.ObjectId
  movieId    String?   @db.ObjectId
  movie      Movie?    @relation(fields: [movieId], references: [id])
}

model Movie {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  description  String?
  director     String?
  actors       String[]
  duration_min Int?
  release_date DateTime?
  genreIds     String[]  @db.ObjectId
  genres       Genre[]   @relation(fields: [genreIds], references: [id])
  show         Show[]
}

model Genre {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  movieIds String[] @db.ObjectId
  movies   Movie[]  @relation(fields: [movieIds], references: [id])
}
